server:
  port: 8090
  address: 0.0.0.0

spring:
  application:
    name: "Auth-server"

  output:
    ansi:
      enabled: ALWAYS

  security:
    oauth2:
      authorization-server:
        issuer-url: ${OAUTH2_ISSUER_URI:http://localhost:8090}
        jwk-set-uri: ${OAUTH2_JWK_URI:http://localhost:8090/oauth2/jwks}
        client-urls:
          - http://web-client:8080/login/oauth2/code/apm-client
          - http://127.0.0.1:8080/login/oauth2/code/apm-client
          - http://192.168.1.179:8080/login/oauth2/code/apm-client
          - http://192.168.1.4:8080/login/oauth2/code/apm-client
          - http://192.168.1.*:8080/login/oauth2/code/apm-client
        client-id: "client"         # дефолтное значение client-id для регистрации клиента
        client-secret: "secret"     # дефолтное значение client-secret для регистрации клиента
        apm-id: "apmid"             # дефолтное значение client-id для регистрации программы-оператора, работающей без пользователя
        apm-secret: "hren-ugadaesh" # дефолтное значение client-secret для регистрации программы-оператора, работающей без пользователя
        expiration-time: 30         # время валидности токена (минут)

  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/phobos
    username: root
    password: root
# H2 database
#  datasource:
#    driver-class-name: org.h2.Driver
#    url: jdbc:h2:mem:auth
#    username: sa
#    password:

  # Spring Jpa Hibernate
  jpa:
    hibernate:
      ddl-auto: none
    show-sql: true
    properties:
      hibernate.format_sql: true
      hibernate.highlight_sql: true
  # автозапуск скриптов 'schema.sql' и 'data.sql'
  sql:
    init:
      mode: always                                  # всегда

#logging:
#  level:
#    org.springframework.security.oauth2: DEBUG
#    org.springframework.security: DEBUG
#    org.springframework.web: DEBUG
#    org.springframework.security.jwt: DEBUG
